# Stage 1: Build the Next.js application
FROM node:20-alpine AS builder

# Use dumb-init to handle PID 1 correctly (optional but good practice)
RUN apk add --no-cache dumb-init

# Install pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

# Set working directory
WORKDIR /app

# Copy only lockfile and package.json first for better layer caching
COPY frontend/pnpm-lock.yaml frontend/package.json ./frontend/

WORKDIR /app/frontend

# Install dependencies using pnpm (only production if no build-time deps)
RUN pnpm install --frozen-lockfile

# Copy the rest of the app
COPY frontend/ ./ 

# Build Next.js app
RUN pnpm run build

# Stage 2: Production image
FROM node:20-alpine

# Use dumb-init to handle PID 1 correctly
RUN apk add --no-cache dumb-init && corepack enable && corepack prepare pnpm@latest --activate

# Set workdir
WORKDIR /app/frontend

# Copy necessary files from builder
COPY --from=builder /app/frontend/.next ./.next
COPY --from=builder /app/frontend/public ./public
COPY --from=builder /app/frontend/package.json ./package.json
COPY --from=builder /app/frontend/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --from=builder /app/frontend/node_modules ./node_modules

# Set NODE_ENV for production
ENV NODE_ENV=production

# Expose the Next.js port
EXPOSE 3000

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Run the production server
CMD ["pnpm", "start"]
